EBNF 完整版

module = {block}

block = functionBlock

functionBlock = "fn" identifier productType type "{" {statement} "}"

typeParams = "[" identifier  {"," identifier}  "]"

primaryExpr = identifier | constant | '(' expression ')'

postfixExpr = 
    primaryExpr | 
    postfixExpr '(' expressionList ')' |
    postfixExpr '.' identifier "?"?

unaryExpr = postfixExpr | unary_op unaryExpr

binaryExpr = unaryExpr | binaryExpr binaryOp unaryExpr

expression = binaryExpr | unaryExpr assignOp expression

expressionList = e | expression {"," expression}

varList  = e | identifier {"," identifier}

varDefStmt = ("var"|"val") varList [":" type] ["=" expression] ";"

singleStmt = expression ";"

returnStmt = "return" expression ";"

ifStmt = "if" expression "{" {statement} "}" ["else" "{" {statement} "}"]

forStmt = "for" identifier "in" expression "{" {statement} "}"

whileStmt = ("while" expression | "loop") "{" {statement} "}"

statement = singleStmt | varDefStmt | returnStmt | ifStmt | forStmt | whileStmt

sumType = "(" [identifier ":"] type  {"|" [identifier ":"] type } ")"

productType = "(" [identifier ":"] type  {"," [identifier ":"] type } ")"

type = (identifier | sumType | productType) "*"?