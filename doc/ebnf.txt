EBNF 完整版

module = {block}

block = functionBlock

functionBlock = "fn" identifier [typeParams] "(" parameters ")" type "{" {statement} "}"

typeParams = "[" identifier  {"," identifier}  "]"

parameters = e | varNameType {"," varNameType}

varNameType = identifier ":" type

primaryExpr = identifier | constant | '(' expression ')'

postfixExpr = 
    primaryExpr | 
    postfixExpr '(' arguments ')' |
    postfixExpr '.' identifier

expression = binaryExpr | unaryExpr assignOp expression 

binaryExpr = unaryExpr | binaryExpr binaryOp unaryExpr

unaryExpr = postfixExpr | unary_op unaryExpr

arguments = e | arguments {"," argument}

argument = expression {"," expression}

singleStmt = expression ";"

statement = singleStmt

# todo
type = identifier